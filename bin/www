#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('TheTrailGuysAndGal:server');
var http = require('http');

startProxy();

function startProxy(){
  http.createServer(function(req, res) {
    if (req.url.match(/^\/proxy/)) {
      // Handle the custom route
      return proxy(req, res);
    } else {
      // Fall back to metaserve
      metaserve(req, res);
    }
  }).listen(8080);

  function notFound (res) {
    res.statusCode = 404;
    res.end('404 Error');
  }

  function proxy (req, res) {
    var url = req.url;

    var test = {
      proxy: /^\/proxy\/(.+)$/,
      hosts: /^https?:\/\/((geotrigger|www)\.)?arcgis\.com\//
    };

    var matchProxy = url.match(test.proxy);

    if (!matchProxy) {
      return notFound(res);
    }

    var target = matchProxy[1];
    var matchHosts = target.match(test.hosts);

    if (!matchHosts) {
      return notFound(res);
    }

    var headers = req.headers;
    var method = req.method;

    console.log(method + ' ' + url);

    if (!headers['content-type']) {
      if (matchProxy[1].match(/geotrigger\.arcgis\.com\//)) {
        headers['content-type'] = 'application/json';
      } else {
        headers['content-type'] = 'application/x-www-form-urlencoded';
      }
    }

    delete headers.host;

    req.pipe(request({
      url: target,
      headers: headers,
      method: method
    })).pipe(res);

  }

  console.log('proxy server running on port 8080');
}


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
